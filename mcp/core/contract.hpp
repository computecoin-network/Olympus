#pragma once
#include "transaction.hpp"
#include <account/base.hpp>
#include <libdevcore/Address.h>

namespace mcp
{
	const dev::bytes DENContractByteCode(dev::fromHex(""));
	const std::string DENContractABI = "[{\"inputs\": [{\"internalType\": \"address\",\"name\": \"minerAddress\",\"type\": \"address\"}],\"name\": \"isMiner\",\"outputs\": [{\"internalType\": \"bool\",\"name\": \"\",\"type\": \"bool\"}],\"stateMutability\": \"view\",\"type\": \"function\"}]";

	class DENContractCaller
	{
	public:
		DENContractCaller(){}
		DENContractCaller(dev::BoundContract _contract) :contract(_contract) {}

		dev::bytes isMiner(dev::Address minerAddress);
		bool getIsMiner(dev::bytes& data);

		//demo
		// returns int v1, dev::Address v2, std::string v3, bool v4, dev::bytes v5
		template<typename... Args>
		void getreturns(int & v1, dev::h160& v2, std::string& v3, bool& v4, dev::bytes& v5, Args const&... args);
	private:
		dev::BoundContract contract;
	};

	DENContractCaller NewDENContractCaller(dev::ContractCaller const& _caller);
	Transaction InitDenContractTransaction();
	
	/// args: abi input
	/// v1,v2,v3,v4,v5 return values
	template<typename... Args>
	inline void DENContractCaller::getreturns(int & v1, dev::h160& v2, std::string& v3, bool& v4, dev::bytes& v5, Args const&... args)
	{
		std::string method = "getreturns";
		dev::CallOpts opts{ DENManagerAddress };
		dev::bytes ret = contract.Call(&opts, method, args...);
		contract.Unpack(method, ret, v1, v2, v3, v4, v5);
	}

	///ContractCaller instance
	extern DENContractCaller DENCaller;

	///mainnet witness contract
	const dev::bytes MainContractByteCode(dev::fromHex(""));
	const std::string MainContractABI = "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]";
	const dev::Address MainContractAddress = dev::Address("0xD2b53c6dcF4EB754DE108ec0420EE7EcfC1223B3");
	const dev::Address MainCallcAddress = dev::Address("0x1144b522f45265c2dfdbaee8e324719e63a1694c");
	Transaction InitMainContractTransaction();

	class MainContractCaller
	{
	public:
		MainContractCaller() {}
		MainContractCaller(dev::BoundContract _contract) :contract(_contract) {}

		dev::bytes BatchTransfer(std::map<dev::Address, u256> const& _v);
	private:
		dev::CallOpts DefaultOpts{ MainCallcAddress };
		dev::BoundContract contract;
	};

	MainContractCaller NewMainContractCaller(dev::ContractCaller const& _caller);
	///ContractCaller instance
	extern MainContractCaller MainCaller;
}
